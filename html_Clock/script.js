// Generated by CoffeeScript 1.7.1
var CanvasH, Clock, ClockMaths, Drag, Hours, Minutes, Needles, Seconds, Vertex, initCanvas, update,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Drag = (function() {
  function Drag() {
    this.move = __bind(this.move, this);
    this.mouseDown = __bind(this.mouseDown, this);
    this.mouseUp = __bind(this.mouseUp, this);
    this.init = __bind(this.init, this);
  }

  Drag.prototype.offX = null;

  Drag.prototype.offY = null;

  Drag.prototype.init = function(element) {
    this.element = element;
    this.element.addEventListener('mousedown', this.mouseDown, false);
    return window.addEventListener('mouseup', this.mouseUp, false);
  };

  Drag.prototype.mouseUp = function() {
    return window.removeEventListener('mousemove', this.move, true);
  };

  Drag.prototype.mouseDown = function(e) {
    this.offY = e.clientY - parseInt(this.element.offsetTop);
    this.offX = e.clientX - parseInt(this.element.offsetLeft);
    return window.addEventListener('mousemove', this.move, true);
  };

  Drag.prototype.move = function(e) {
    this.element.style.position = 'absolute';
    this.element.style.top = (e.clientY - this.offY) + 'px';
    return this.element.style.left = (e.clientX - this.offX) + 'px';
  };

  return Drag;

})();

CanvasH = (function() {
  CanvasH.prototype.context = null;

  CanvasH.prototype.element = null;

  CanvasH.prototype.events = {
    m: "minutePassed",
    h: "hourPassed"
  };

  function CanvasH() {
    this.on = __bind(this.on, this);
    var dragger;
    this.element = document.getElementById("myCanvas");
    this.context = this.element.getContext("2d");
    dragger = new Drag;
    dragger.init(this.element);
  }

  CanvasH.prototype.on = function(eventName, listener) {
    return this.element.addEventListener(eventName, listener);
  };

  CanvasH.prototype.trigger = function(eventName) {
    var event;
    if (document.createEvent) {
      event = document.createEvent("HTMLEvents");
      event.initEvent(eventName, true, true);
    } else {
      event = document.createEventObject();
      event.eventType = eventName;
    }
    event.eventName = eventName;
    if (document.createEvent) {
      return this.element.dispatchEvent(event);
    } else {
      return this.element.fireEvent("on" + event.eventType, event);
    }
  };

  return CanvasH;

})();

Vertex = (function() {
  Vertex.prototype.x = 0;

  Vertex.prototype.y = 0;

  function Vertex(x, y) {
    this.x = x != null ? x : 0;
    this.y = y != null ? y : 0;
  }

  return Vertex;

})();

ClockMaths = (function() {
  function ClockMaths() {}

  ClockMaths.prototype.CalculateSecondVertex = function(start, hypotanuse, theta) {
    var dx, dy, t;
    t = new Vertex;
    dx = hypotanuse * Math.sin((theta * Math.PI) / 180);
    dy = hypotanuse * Math.cos((theta * Math.PI) / 180);
    t.x = start.x - dx;
    t.y = start.y - dy;
    return t;
  };

  ClockMaths.prototype.drawLine = function(start, end, width) {
    if (width == null) {
      width = 1;
    }
    can.context.lineWidth = width;
    can.context.beginPath();
    can.context.moveTo(start.x, start.y);
    can.context.lineTo(end.x, end.y);
    return can.context.stroke();
  };

  return ClockMaths;

})();

Needles = (function(_super) {
  __extends(Needles, _super);

  function Needles() {
    return Needles.__super__.constructor.apply(this, arguments);
  }

  Needles.prototype.value = 0;

  Needles.prototype.origin = null;

  Needles.prototype.radius = null;

  Needles.prototype.angle = 0;

  Needles.prototype.width = 1;

  return Needles;

})(ClockMaths);

Seconds = (function(_super) {
  __extends(Seconds, _super);

  function Seconds(origin, radius, value) {
    this.origin = origin;
    this.radius = radius;
    this.value = value != null ? value : 0;
    this.update = __bind(this.update, this);
    this.angle -= this.value * 6;
  }

  Seconds.prototype.update = function() {
    var b;
    if (this.angle === -360) {
      this.angle = 0;
      can.trigger(can.events.m);
    }
    this.angle -= 6;
    b = this.CalculateSecondVertex(this.origin, this.radius, this.angle);
    return this.drawLine(a, b, this.width);
  };

  return Seconds;

})(Needles);

Minutes = (function(_super) {
  __extends(Minutes, _super);

  Minutes.prototype.width = 3;

  function Minutes(origin, radius, value) {
    this.origin = origin;
    this.radius = radius;
    this.value = value != null ? value : 0;
    this.update = __bind(this.update, this);
    this.angleUpdate = __bind(this.angleUpdate, this);
    this.angle -= this.value * 6;
    can.on(can.events.m, this.angleUpdate);
  }

  Minutes.prototype.angleUpdate = function() {
    this.angle -= 6;
    return can.trigger(can.events.h);
  };

  Minutes.prototype.update = function() {
    var b;
    if (this.angle === -360) {
      this.angle = 0;
    }
    b = this.CalculateSecondVertex(this.origin, this.radius, this.angle);
    return this.drawLine(a, b, this.width);
  };

  return Minutes;

})(Needles);

Hours = (function(_super) {
  __extends(Hours, _super);

  Hours.prototype.width = 3;

  function Hours(origin, radius, hourPassed, minutePassed) {
    this.origin = origin;
    this.radius = radius;
    this.hourPassed = hourPassed;
    this.minutePassed = minutePassed;
    this.angleUpdate = __bind(this.angleUpdate, this);
    this.angle -= (this.hourPassed % 12) * 30 + this.minutePassed * 0.5;
    can.on(can.events.h, this.angleUpdate);
  }

  Hours.prototype.angleUpdate = function() {
    return this.angle -= 0.5;
  };

  return Hours;

})(Minutes);

Clock = (function() {
  Clock.prototype.backGround = null;

  Clock.prototype.ready = false;

  function Clock() {
    this.update = __bind(this.update, this);
    this.readyImage = __bind(this.readyImage, this);
    this.backGround = new Image;
    this.backGround.onload = this.readyImage;
    this.backGround.src = "res/roman.png";
  }

  Clock.prototype.readyImage = function() {
    return this.ready = true;
  };

  Clock.prototype.update = function() {
    if (this.ready) {
      return can.context.drawImage(this.backGround, 0, 0, 250, 250);
    }
  };

  return Clock;

})();

initCanvas = function() {
  return window.can = new CanvasH;
};

update = function() {
  can.element.width = can.element.width;
  clock.update();
  seconds.update();
  minutes.update();
  return hours.update();
};

window.addEventListener('load', function() {
  var d;
  initCanvas();
  window.a = new Vertex(125, 125);
  d = new Date;
  window.seconds = new Seconds(a, 100, d.getSeconds());
  window.minutes = new Minutes(a, 100, d.getMinutes());
  window.hours = new Hours(a, 70, d.getHours(), d.getMinutes());
  window.clock = new Clock;
  update();
  return setInterval(update, 1000);
});
